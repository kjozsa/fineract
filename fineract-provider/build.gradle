/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
description = 'Fineract Provider'

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.swagger.core.v3.swagger-gradle-plugin'
apply plugin: 'com.google.cloud.tools.jib'
apply plugin: 'se.thinkcode.cucumber-runner'

check.dependsOn('cucumber')

compileJava.doLast {
    def source = sourceSets.main.java.classesDirectory.get()
    copy {
        from file('src/main/resources/jpa/persistence.xml')
        into "${source}/META-INF/"
    }
    javaexec {
        description = 'Performs EclipseLink static weaving of entity classes'
        main = 'org.eclipse.persistence.tools.weaving.jpa.StaticWeave'
        args '-persistenceinfo', source, source, source
        classpath sourceSets.main.runtimeClasspath
    }
    delete "${source}/META-INF/persistence.xml"
}

tasks.register('prepareInputYaml') {
    inputs.file('config/swagger/fineract-input.yaml.template')
    outputs.file("$buildDir/tmp/swagger/fineract-input.yaml")
    doLast {
        copy {
            from file('config/swagger/fineract-input.yaml.template')
            into file("$buildDir/tmp/swagger")
            rename { String filename -> 'fineract-input.yaml' }
            filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [VERSION: project.version.toString()])
        }
    }
}

resolve {
    outputFileName = 'fineract'
    outputFormat = 'JSONANDYAML'
    classpath = sourceSets.main.runtimeClasspath
    outputDir = file("$buildDir/classes/java/main/static")
    openApiFile = file("$buildDir/tmp/swagger/fineract-input.yaml")
    sortOutput = true
    dependsOn prepareInputYaml
}

configurations {
    providedRuntime
    providedCompile
    driver
    compile {
        exclude module: 'hibernate-entitymanager'
        exclude module: 'hibernate-validator'
        exclude module: 'activation'
        exclude module: 'bcmail-jdk14'
        exclude module: 'bcprov-jdk14'
        exclude module: 'bctsp-jdk14'
        exclude module: 'c3p0'
        exclude module: 'stax-api'
        exclude module: 'jaxb-api'
        exclude module: 'jaxb-impl'
        exclude module: 'jboss-logging'
        exclude module: 'itext-rtf'
        exclude module: 'classworlds'
    }
}

apply plugin: 'io.freefair.lombok'
apply from: 'dependencies.gradle'

modernizer {
    ignoreClassNamePatterns = [
        '.*AbstractPersistableCustom',
        '.*EntityTables',
        '.*domain.*'
    ]
}

sourceSets {
    main {
        output.resourcesDir = java.classesDirectory
    }
    test {
        output.resourcesDir = java.classesDirectory
        if (!(project.hasProperty('env') && project.env == 'dev')) {
            java {
                exclude '**/core/boot/tests/**'
            }
        }
    }
}

import groovy.sql.Sql

springBoot {
    mainClass = 'org.apache.fineract.ServerApplication'
}

bootRun {
    jvmArgs = [
        "-Dspring.output.ansi.enabled=ALWAYS"
    ]
}


bootJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
                'Main-Class': 'org.springframework.boot.loader.launch.PropertiesLauncher',
                'Implementation-Title': 'Apache Fineract',
                'Implementation-Version': project.version
                )
    }
    archiveClassifier = ''
    dependsOn resolve
}

jib {
    from {
        image = 'azul/zulu-openjdk-alpine:17'
        platforms {
            platform {
                architecture = System.getProperty("os.arch") == 'aarch64' ? 'arm64' : 'amd64'
                os = 'linux'
            }
        }
    }
    to {
        image = 'fineract'
        tags = [project.version, 'latest']
    }
    container {
        creationTime = 'USE_CURRENT_TIMESTAMP'
        mainClass = 'org.apache.fineract.ServerApplication'
        extraClasspath = ['/app/plugins/*']
        args = [
            '-Duser.home=/tmp',
            '-Dfile.encoding=UTF-8',
            '-Duser.timezone=UTC',
            '-Djava.security.egd=file:/dev/./urandom'
        ]
        ports = ['8080', '8443']
        labels = [maintainer: 'Aleksandar Vidakovic <aleks@apache.org>']
        user = 'nobody:nogroup'
    }
    allowInsecureRegistries = true
    pluginExtensions {
        pluginExtension {
            implementation = 'com.google.cloud.tools.jib.gradle.extension.layerfilter.JibLayerFilterExtension'
            configuration {
                filters {
                    filter {
                        glob = '/app/resources/**'
                    }
                }
            }
        }
    }
}

tasks.register('migrateDatabase') {
    doFirst {
        println "Executing liquibase database migration to version $dbVersion"
        def dbUrl = "jdbc:${dbType}://${dbHost}:${dbPort}/${dbName}"
        def changeLogFilePath = "src/main/resources/db/changelog/tenant/upgrades/0000_upgrade_to_${dbVersion}.xml"
        liquibase {
            activities {
                main {
                    changeLogFile changeLogFilePath
                    url dbUrl
                    username mysqlUser
                    password mysqlPassword
                }
            }
        }
    }
}

cucumber {
    tags = 'not @ignore'
    main = 'io.cucumber.core.cli.Main'
    shorten = 'argfile'
    plugin = [
        'pretty',
        'html:build/reports/cucumber/report.html',
        'json:build/reports/cucumber/report.json',
        'junit:build/reports/cucumber/report.xml'
    ]
}

tasks.jibDockerBuild.dependsOn bootJar

//gitProperties {
//    gitPropertiesResourceDir = file("$buildDir/classes/java/main")
//    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
//    dateFormatTimeZone = 'GMT'
//    failOnNoGitDirectory = false
//}

// Ensure tasks execute in the correct order
jar.dependsOn resolve
test.dependsOn resolve
checkstyleMain.dependsOn resolve
checkstyleTest.dependsOn resolve
rat.dependsOn prepareInputYaml
spotbugsTest.dependsOn resolve
processResources.dependsOn compileJava
resolveMainClassName.dependsOn resolve
